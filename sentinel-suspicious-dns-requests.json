{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/01387607-a778-4c4e-b9d8-46cd5a603221')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/01387607-a778-4c4e-b9d8-46cd5a603221')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2023-12-01-preview",
            "properties": {
                "displayName": "Suspicious DNS queries",
                "description": "detect suspicious DNS requests using dns security policy and threat intelligence. Runs every 1h based on dns summary rule which aggregates on 1h interval",
                "severity": "Medium",
                "enabled": true,
                "query": "// detect suspicious DNS requests using dns security policy and threat intelligence \r\n// Note: This query is based on a custom summary rule for DNSQueryLogs -> https://github.com/pisinger/hunting/blob/main/sentinel-summary-rule-DNSQueryLogs.kql\r\n// The rule will check for exact query matches, parent domain matches, and CNAME answer matches against the threat indicators table\r\nlet dt_lookBack = 1h;      // needs to be in sync with the summary rule aggregation interval\r\nlet ioc_lookBack = 14d;    // Look back 14 days for threat intelligence indicators\r\n// get all active domains from threat intel\r\nlet ThreatIntel = materialize(\r\n    ThreatIntelIndicators\r\n    | where TimeGenerated >= ago(ioc_lookBack) and ValidUntil > now()\r\n    | where IsActive == true\r\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by Id\r\n    | extend source = Data.name\r\n    | extend IndicatorType = tostring(Data.indicator_types)\r\n    | where ObservableKey has \"domain\"\r\n    | extend DomainName = ObservableValue\r\n    | where isnotempty(DomainName)\r\n);\r\nlet DNSQueryLogs_sum = (\r\n    DNSQueryLogs_sum_CL\r\n    | where TimeGenerated >= ago(dt_lookBack)\r\n    // remove trailing dot from domain\r\n    | extend QueryName = trim_end(\"\\\\.\", QueryName)\r\n);\r\n//----------------------\r\n// dns query match\r\nlet ioc_query_match_parentdomain_only = (\r\n    ThreatIntel\r\n    | project DomainName, IsActive, Confidence, ValidUntil, IndicatorType\r\n    | join kind=inner (\r\n        DNSQueryLogs_sum\r\n        // extract contoso.com from sub.contoso.com\r\n        | extend DomainNameExtractKey = replace_regex(QueryName, \"^.*?\\\\.\", \"\")\r\n        | extend _LookupType = \"query_match_parentdomain_only\"\r\n    ) on $left.DomainName == $right.DomainNameExtractKey\r\n);\r\n// dns query match\r\nlet ioc_query_match_exact = (\r\n    ThreatIntel\r\n    | project DomainName, IsActive, Confidence, ValidUntil, IndicatorType \r\n    | join kind=inner (\r\n        DNSQueryLogs_sum\r\n        | extend _LookupType = \"query_match_exact\"\r\n    ) on $left.DomainName == $right.QueryName\r\n);\r\n// dns answer match for cname\r\nlet ioc_answer_match_exact = (\r\n    ThreatIntel\r\n    | project DomainName, IsActive, Confidence, ValidUntil, IndicatorType \r\n    | join kind=inner (\r\n        DNSQueryLogs_sum\r\n        | where RType == \"CNAME\"\r\n        | mv-expand AnswersKey = Answers to typeof(string)\r\n        // remove trailing dot from expanded answers\r\n        | extend AnswersKey = trim_end(\"\\\\.\", AnswersKey)\r\n        | extend _LookupType = \"answer_match_exact\"\r\n    ) on $left.DomainName == $right.AnswersKey\r\n);\r\nioc_query_match_parentdomain_only\r\n| union ioc_query_match_exact, ioc_answer_match_exact\r\n| project TimeGenerated, QueryName, DomainName, IsActive, Confidence, ValidUntil, IndicatorType, RType, OperationName, SourceIpAddress, Transport, Answers, RDataCount, EventCount, Region, VirtualNetworkId, _LookupType",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "CommandAndControl",
                    "Exfiltration"
                ],
                "techniques": [],
                "subTechniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "P1D",
                        "matchingMethod": "AnyAlert",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": {
                    "VnetRegion": "Region",
                    "VnetId": "VirtualNetworkId",
                    "Protocol": "Transport",
                    "ThreatType": "IndicatorType",
                    "LookupType": "_LookupType"
                },
                "entityMappings": [
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "SourceIpAddress"
                            }
                        ]
                    },
                    {
                        "entityType": "DNS",
                        "fieldMappings": [
                            {
                                "identifier": "DomainName",
                                "columnName": "DomainName"
                            }
                        ]
                    },
                    {
                        "entityType": "DNS",
                        "fieldMappings": [
                            {
                                "identifier": "DomainName",
                                "columnName": "QueryName"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
            }
        }
    ]
}